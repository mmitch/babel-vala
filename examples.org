* ob-vala.el example usage


** simple defaults

Note that the comma in the output is a delimiter by default, so the
result is a vector/table.

#+BEGIN_SRC vala
  class Demo.HelloWorld : GLib.Object {
      public static int main(string[] args) {
          stdout.printf("Hello, World\n");
          return 0;
      }
  }
#+END_SRC

#+RESULTS:
| Hello | World |


** verbatim results

Passing the =:results verbatim= argument, we get plain text instead.

#+BEGIN_SRC vala :results verbatim
  class Demo.HelloWorld : GLib.Object {
      public static int main(string[] args) {
          stdout.printf("Hello, World\n");
          return 0;
      }
  }
#+END_SRC

#+RESULTS:
: Hello, World


** multiple classes

Multiple classes can be located in a single code block.

#+BEGIN_SRC vala
  class HelloWorld : GLib.Object {
      public static void greet() {
          stdout.printf("Hello world\n");
      }
  }

  class Demo : GLib.Object {
      public static int main(string[] args) {
          HelloWorld.greet();
          return 0;
      }
  }
#+END_SRC

#+RESULTS:
: Hello world


** conditional compilation

Note the arguments =:flags -D FOO= that are passed as =-D FOO= to the
vala compiler so the =#if FOO= compilation option is used.

#+BEGIN_SRC vala :flags -D FOO
  class Demo.HelloWorld : GLib.Object {
      public static int main(string[] args) {
#if FOO
          stdout.printf("Foo\n");
#else
          stdout.printf("No foo\n");
#endif
          return 0;
      }
  }
#+END_SRC

#+RESULTS:
: Foo


** GTK example

The =:flags= pass =--pkg gtk+-3.0= to the Vala compiler to include the
GTK3 library.  It needs to be installed (eg. package =libgtk-3-dev= on
Ubuntu >= 11.04).

This example must be executed under a graphical environment.

#+BEGIN_SRC vala :flags --pkg gtk+-3.0 :results silent
using Gtk;

public class HelloWorldWindow : Window {

    public HelloWorldWindow () {
        var label = new Label ("Hello World");
        add (label);
        set_default_size (100, 100);
    }
}

void main (string[] args) {
    Gtk.init (ref args);

    var win = new HelloWorldWindow ();
    win.destroy.connect (Gtk.main_quit);
    win.show_all ();

    Gtk.main ();
}
#+END_SRC


** commandline parameters

Use =:cmdline= to pass command arguments to the Vala program upon
execution.

#+BEGIN_SRC vala :cmdline foo bar
  class Demo.HelloWorld : GLib.Object {
      public static int main(string[] args) {
          for (int i=0; i < args.length; i++) {
              stdout.printf("argv[%d] = %s\n" , i, args[i]);
          }
          return 0;
      }
  }
#+END_SRC

Note that =argv[0]= is, as usual, the binary name.  The =:cmdline=
arguments start at index =1=.

#+RESULTS:
| argv[0] | = | /tmp/babel-17227uSE/vala-bin-17227VUR |
| argv[1] | = | foo                                   |
| argv[2] | = | bar                                   |

# Local Variables:
# eval: (require 'ob-vala)
# End:
